// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Ongevallen {
  id                 Int      @id @default(autoincrement())
  year               Int // DT_YEAR_COLLISION
  month              Int // DT_MONTH_COLLISION
  time               DateTime // DT_TIME
  nisCode            String // CD_NIS
  regionCollisionFr  String // TX_RGN_COLLISION_FR
  regionCollisionNl  String // TX_RGN_COLLISION_NL
  provCollisionFr    String // TX_PROV_COLLISION_FR
  provCollisionNl    String // TX_PROV_COLLISION_NL
  muntyCollisionFr   String // TX_MUNTY_COLLISION_FR
  muntyCollisionNl   String // TX_MUNTY_COLLISION_NL
  xCoord             Float // MS_X_COORD
  yCoord             Float // MS_Y_COORD
  crosswayCode       String? // CD_CROSSWAY
  crosswayFr         String? // TX_CROSSWAY_FR
  crosswayNl         String? // TX_CROSSWAY_NL
  weatherCode        Int? // CD_WEATHER
  weatherFr          String? // TX_WEATHER_FR
  weatherNl          String? // TX_WEATHER_NL
  roadConditionCode  Int? // CD_ROAD_CONDITION
  roadConditionFr    String? // TX_ROAD_CONDITION_FR
  roadConditionNl    String? // TX_ROAD_CONDITION_NL
  buildUpAreaCode    Int? // CD_BUILD_UP_AREA
  buildUpAreaFr      String? // TX_BUILD_UP_AREA_FR
  buildUpAreaNl      String? // TX_BUILD_UP_AREA_NL
  lightConditionCode Int? // CD_LIGHT_CONDITION
  lightConditionFr   String? // TX_LIGHT_CONDITION_FR
  lightConditionNl   String? // TX_LIGHT_CONDITION_NL
  roadTypeCode       Int? // CD_ROAD_TYPE
  roadTypeFr         String? // CD_ROAD_TYPE_FR
  roadTypeNl         String? // CD_ROAD_TYPE_NL
  classAccidentsCode Int? // CD_CLASS_ACCIDENTS
  classAccidentsFr   String? // TX_CLASS_ACCIDENTS_FR
  classAccidentsNl   String? // TX_CLASS_ACCIDENTS_NL
  roadUserType1Code  Int? // CD_ROAD_USR_TYPE1
  roadUserType1Fr    String? // TX_ROAD_USR_TYPE1_FR
  roadUserType1Nl    String? // TX_ROAD_USR_TYPE1_NL
  roadUserType2Code  Int? // CD_ROAD_USR_TYPE2
  roadUserType2Fr    String? // TX_ROAD_USR_TYPE2_FR
  roadUserType2Nl    String? // TX_ROAD_USR_TYPE2_NL
  collisionTypeCode  Int? // CD_COLLISION_TYPE
  collisionTypeFr    String? // TX_COLLISON_TYPE_FR
  collisionTypeNl    String? // TX_COLLISION_TYPE_NL
  obstaclesCode      Int? // CD_OBSTACLES
  obstaclesFr        String? // TX_OBSTACLES_FR
  obstaclesNl        String? // TX_OBSTACLES_NL

  municipalityId Int?
  municipality   Gemeenten? @relation(fields: [municipalityId], references: [id])

  @@map("ongevallen")
}

model Gemeenten {
  id         Int    @id @default(autoincrement())
  nisCode    String @unique
  nameDutch  String
  nameFrench String
  geoJSON    Json

  collisions Ongevallen[]

  @@map("gemeenten")
}
